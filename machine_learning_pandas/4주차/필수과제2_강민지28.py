# -*- coding: utf-8 -*-
"""필수과제2_강민지28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P6UoOSzvspwUdCiGvLmK_HUMM_D3fKQV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer, KNNImputer
from fancyimpute import IterativeImputer
# 사이킷런 제공하는 캘리포니아 집값 데이터 셋 불러오는 코드
from sklearn.datasets import fetch_california_housing

# 캘리포니아 주택 가격 데이터셋 로드
housing = fetch_california_housing()
# 데이터프레임 생성
df_housing = pd.DataFrame(housing.data, columns=housing.feature_names)
df_housing['Target'] = housing.target  # 목표 변수 추가

df_housing

df_housing.loc[5:20, 'MedInc'] = np.NaN
df_housing.loc[150:200, 'MedInc'] = np.NaN
df_housing.loc[450:600, 'MedInc'] = np.NaN
df_housing.loc[790:1050, 'MedInc'] = np.NaN
df_housing.loc[2500:5279, 'MedInc'] = np.NaN
df_housing.loc[10798:15798, 'MedInc'] = np.NaN
df_housing.loc[20000:20600, 'MedInc'] = np.NaN

# 결측치 대체
# 1. 1차 선형보간법, interpolate
df_linear = df_housing.interpolate(method='linear') # 1차 선형보간법

# 2. 2차 선형보간법, interpolate
df_quaderatic = df_housing.interpolate(method='quadratic')  # 2차 선형보간법

# 3. 평균대치법
imputer_mean = SimpleImputer(strategy='mean')
# sklearn 제공하는 simpleimputer로 평균대치
df_mean = imputer_mean.fit_transform(df_housing)
df_mean = pd.DataFrame(df_mean, columns= df_housing.columns)
# ** columns= 은 전체 열을 반영해야 한다.
# columns 담길 때 복습과제에서 data를 df라는 DataFrame으로 만들어줬기 때문에
# 2차원이 되어 column명이 List로 들어감
'''
만약, 코드를 아래와 같이 작성시,
df_mean = pd.DataFrame(df_mean, columns= ['MedInc'])
그러나 코드에서는 'MedInc' 열만을 선택하여 대체하고 있는데,
다른 열들에 대해서는 대체를 수행하지 않고 있다.
이는 원하는 대체 작업을 다른 열에도 적용하지 않는 한계로 인해 발생할 수 있다.
'''

# 4. 0값으로 대체
# fillna() 이 안에 원하는 값을 넣을 수 있다.
df_zero = df_housing.fillna(0)

# 5. KNN 방법
imputer_knn = KNNImputer(n_neighbors=3)
df_knn = imputer_knn.fit_transform(df_housing)
df_knn = pd.DataFrame(df_knn, columns=df_housing.columns)
# df_knn = pd.DataFrame(df_knn, columns=['MedInc'])

# 6. MICE 다중대치법
mice_imputer = IterativeImputer()   # 베이지안회귀로 결측치 보간
df_mice = mice_imputer.fit_transform(df_housing)
df_mice = pd.DataFrame(df_mice, columns=df_housing.columns)
# df_mice = pd.DataFrame(df_mice, columns=['MedInc'])

# 시각화를 통해서 어떻게 변환되는지 확인
# 하나의 열인 ['MedInc'] 만 비교하기 위해서 따로 지정
fig, axs = plt.subplots(7, 1, figsize=(20, 30))
sns.lineplot(data=df_housing['MedInc'], marker='o', ax=axs[0], legend='auto')
axs[0].set_title('Original Data')
sns.lineplot(data=df_linear['MedInc'], marker='s', ax=axs[1], legend='auto')
axs[1].set_title('Linear Data')
sns.lineplot(data=df_quaderatic['MedInc'], marker='^', ax=axs[2], legend='auto')
axs[2].set_title('Quaderatic Data')
sns.lineplot(data=df_mean['MedInc'], marker='v', ax=axs[3], legend='auto')
axs[3].set_title('Simple Mean')
sns.lineplot(data=df_zero['MedInc'], marker='*', ax=axs[4], legend='auto')
axs[4].set_title('Zero')
sns.lineplot(data=df_knn['MedInc'], marker='x', ax=axs[5], legend='auto')
axs[5].set_title('KNN')
sns.lineplot(data=df_mice['MedInc'], marker='D', ax=axs[6], legend='auto')
axs[6].set_title('MICE')

# 결측치가 보간된 행만을 보기 위해서 다른 객체를 지정
# 이 때에도 ['MedInc']열만을 확인

df_housing2 = df_housing['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_linear2 = df_linear['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_quaderatic2 = df_quaderatic['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_mean2 = df_mean['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_zero2 = df_zero['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_knn2 = df_knn['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_mice2 = df_mice['MedInc'].iloc[np.concatenate([np.arange(5, 21), np.arange(150, 201),
                                              np.arange(450, 601), np.arange(790, 1051),
                                              np.arange(2500, 5280), np.arange(10798, 15799),
                                              np.arange(20000, 20601)])]

df_linear2  # 결측치가 보간된 것을 알 수 있다.

# 시각화를 통해서 어떻게 변환되는지 확인
fig, axs = plt.subplots(7, 1, figsize=(13, 15))
sns.lineplot(data=df_housing2, marker='o', ax=axs[0], legend='auto')
axs[0].set_title('Original Data')
sns.lineplot(data=df_linear2, marker='s', ax=axs[1], legend='auto')
axs[1].set_title('Linear Data')
sns.lineplot(data=df_quaderatic2, marker='^', ax=axs[2], legend='auto')
axs[2].set_title('Quaderatic Data')
sns.lineplot(data=df_mean2, marker='v', ax=axs[3], legend='auto')
axs[3].set_title('Simple Mean')
sns.lineplot(data=df_zero2, marker='*', ax=axs[4], legend='auto')
axs[4].set_title('Zero')
sns.lineplot(data=df_knn2, marker='x', ax=axs[5], legend='auto')
axs[5].set_title('KNN')
sns.lineplot(data=df_mice2, marker='D', ax=axs[6], legend='auto')
axs[6].set_title('MICE')

'''
위와 아래의 그래프를 비교해보았을 때,
1. 먼저 추세 및 변동성을 비교해보자면:
Linear Data는 일차함수의 모양으로 결측치가 보간되고,
Quaderatic Data는 이차함수의 모양으로 결측치가 보간되는 것을 확인할 수 있다.
Mean은 4.0과 4.1사이의 평균값으로, Zero는 0의 값으로 보간되며,
KNN과 MICE은 어떻게 보간이 되었는지는 정확하게 알 수는 없으나 직선의 형태로 결측치가 보간되었음을 알 수 있다.

2. 결측치 처리를 비교해보자면:
df_linear2: 선형 보간법을 이용하여 결측치를 대체했다.
df_quaderatic2: 2차 다항식 보간법을 이용하여 결측치를 대체했다.
df_mean2: 각 열의 결측치를 해당 열의 평균값으로 대체했다.
df_zero2: 각 열의 결측치를 0으로 대체했다.
df_knn2: KNN(K-Nearest Neighbors) 알고리즘을 사용하여 결측치를 대체했다.
df_mice2: 다중 대치법(Multiple Imputation by Chained Equations, MICE)을 사용하여 결측치를 대체했다.

3. 모델 예측 성능을 비교해보았더니:
각 모델간의 처리속도의 차이는 거의 미비하였는데,
데이터의 양에 따라서 차이는 생길 수 있을 것 같다.
'''