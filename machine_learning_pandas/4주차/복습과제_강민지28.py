# -*- coding: utf-8 -*-
"""복습과제_강민지28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5wQYn0t2D0JPtmdLpUH-lHVeBYmvksm

#### Missing_Value
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer, KNNImputer
from fancyimpute import IterativeImputer

"""- 결측치를 보간하는 다양한 방법들을 시각화하여 직접 어떤 식으로 되는구나 이 부분을 이해하고자 하는 것!
- 넘파이에서 랜덤으로 데이터 만들어서 시각화는 예정
"""

# 예시 데이터 만들기
# NumPy의 random 모듈을 사용하여 정규 분포를 따르는 임의의 데이터를 생성

np.random.seed(0)
# 난수 발생기의 시드 설정
# 난수 발생기의 시드는 무작위 수를 생성하는 알고리즘의 초기 상태를 결정하는데 사용
# 시드를 설정하면 동일한 시드를 가진 경우에는 항상 동일한 무작위 수가 생성
# 실험의 재현성 보장
data = np.random.normal(10, 2, 100)
# 평균이 10이고 표준편차가 2인 정규 분포를 따르는
# 100개의 임의의 데이터를 생성
data

# df = pd.DataFrame(data, columns='Feature')
df = pd.DataFrame(data, columns=['Feature'])    # columns List 씌워줌

df  # df는 데이터 프레임을 만들어줬기 때문에 2차원 dim=2
    # column의 list 씌워줌

# 결측치를 만들기
df.loc[6:10] = np.nan   # 6번째 ~ 10번째까지를 NaN값(결측치) 넣어줌
df.loc[6:11]

df.loc[6:10, 'Feature'] = np.nan    # 6번째 ~ 10번째까지 NaN(결측치)값을 넣어줌

df[6:12]

df.loc[6:10, 'Feature'] = np.nan
df.loc[20:30, 'Feature'] = np.nan
df.loc[45:60, 'Feature'] = np.nan

# 원본데이터 시각화
plt.figure(figsize=(10,3))
sns.lineplot(data=df, marker='o')
plt.title('Original Data')
plt.show()

# 1. 1차 선형보간법, interpolate
df_linear = df.interpolate(method='linear') # 1차 선형보간법

# 2. 2차 선형보간법, interpolate
df_quaderatic = df.interpolate(method='quadratic')  # 2차 선형보간법

# 3. 평균대치법
imputer_mean = SimpleImputer(strategy='mean')
# sklearn 제공하는 simpleimputer로 평균대치
df_mean = imputer_mean.fit_transform(df)
df_mean = pd.DataFrame(df_mean, columns= ['Feature'])
# columns 담길 때 List로 들어감

# 4. 0값으로 대체
# fillna() 이 안에 원하는 값을 넣을 수 있다.
df_zero = df.fillna(0)

# 5. KNN 방법
imputer_knn = KNNImputer(n_neighbors=3)
df_knn = imputer_knn.fit_transform(df)
df_knn = pd.DataFrame(df_knn, columns=['Feature'])

# 6. MICE 다중대치법
mice_imputer = IterativeImputer()   # 베이지안회귀로 결측치 보간
df_mice = mice_imputer.fit_transform(df)
df_mice = pd.DataFrame(df_mice, columns=['Feature'])

df.loc[6:11]

df_linear[6:12] # df.loc[6:10]의 결측치 값이 보간되었음을 알 수 있다.

df_quaderatic[6:12] # df.loc[6:10]의 결측치 값이 보간되었음을 알 수 있다.

df_mean[6:12]   # df.loc[6:10]의 결측치 값이 보간되었음을 알 수 있다.

df_zero[6:12]   # df.loc[6:10]의 결측치 값이 보간되었음을 알 수 있다.

df_knn[6:12]    # df.loc[6:10]의 결측치 값이 보간되었음을 알 수 있다.

df_mice[6:12]   # df.loc[6:10]의 결측치 값이 보간되었음을 알 수 있다.

df.loc[20:31]

df_linear[20:31]    # df.loc[20:30]의 결측치가 보간되었음을 알 수 있다.

df_quaderatic[20:31]    # df.loc[20:30]의 결측치가 보간되었음을 알 수 있다.

df_mean[20:31]    # df.loc[20:30]의 결측치가 보간되었음을 알 수 있다.

df_zero[20:31]    # df.loc[20:30]의 결측치가 보간되었음을 알 수 있다.

df_knn[20:31]    # df.loc[20:30]의 결측치가 보간되었음을 알 수 있다.

df_mice[20:31]    # df.loc[20:30]의 결측치가 보간되었음을 알 수 있다.

# 시각화를 통해서 어떻게 변환되는지 확인
fig, axs = plt.subplots(7, 1, figsize=(10, 12))
sns.lineplot(data=df, marker='o', ax=axs[0], legend='auto')
axs[0].set_title('Original Data')
sns.lineplot(data=df_linear, marker='s', ax=axs[1], legend='auto')
axs[1].set_title('Linear Data')
sns.lineplot(data=df_quaderatic, marker='^', ax=axs[2], legend='auto')
axs[2].set_title('Quaderatic Data')
sns.lineplot(data=df_mean, marker='v', ax=axs[3], legend='auto')
axs[3].set_title('Simple Mean')
sns.lineplot(data=df_zero, marker='*', ax=axs[4], legend='auto')
axs[4].set_title('Zero')
sns.lineplot(data=df_knn, marker='x', ax=axs[5], legend='auto')
axs[5].set_title('KNN')
sns.lineplot(data=df_mice, marker='D', ax=axs[6], legend='auto')
axs[6].set_title('MICE')

# 결측치를 보간하고 -> 데이터 분석, 모델링을 하면서 나오는 평가지표로 성능을 비교할 수 있다.