# -*- coding: utf-8 -*-
"""필수과제1_강민지28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oip0cAGDLOyhNTlYAe_EhLIsC2rUvm0B
"""

'''
필수과제1

    3가지 컬럼 이상으로 조건을 질문하고-> 해당 질문에 대한 답변을 query문으로 만들어서 값을 출력해 주세요!

    e.g. 3가지의 조건을 모두 충족시키는 데이터는?
        생존하고 여성이고 25살 미만

    필수과제 최소 10개 이상으로 질문하고 -> 코드 -> 답이 나오게 정리

'''

import seaborn as sns
import numpy as np
import pandas as pd

dt = sns.load_dataset('titanic')

dt

# 1. pclass 1이면서 성별이 남자이고 나이는 70대 이상

dt.query('''pclass == 1 and sex == "male" and age >= 70''')

# 2. 성별이 남자이고 생존했고 나이는 50대 이상인 사람들의 pclass 분포별 요금 평균

dt.query('sex == "male" and survived == 1 and age >= 50')
dt2 = dt.query('sex == "male" and survived == 1 and age >= 50')
dt2.groupby('pclass')['fare'].mean()

# 3. 생존했고 pclass == 3이고 나이는 30 이하인 사람들의 성별 분포별 나이 평균
dt2 = dt.query('''survived == 1 and pclass == 3 and age <= 30''')
dt2.groupby('sex')['age'].mean()

# 4. 생존했고 나이가 20 이하인 남성이거나 pclass == 1이고 나이는 70 이상인 여성 사람들의 embarked 분포별 요금 평균
dt.query('''survived == 1 and age <=20 and sex == "maale" or pclass == 1 and age >= 70 and sex == "female"''')
# 0 >> 해당 조건을 만족하는 데이터가 없음

# 4. 생존했고 나이가 30 이하인 남성이거나 pclass == 1이고 나이는 50 이상인 여성 사람들의 embarked 분포별 요금 평균
dt2 = dt.query('''survived == 1 and age <=30 and sex == "maale" or pclass == 1 and age >= 50 and sex == "female"''')
dt2.groupby('embarked')['fare'].mean()

# 5. pclass ==1 이고 age>=70인 남성 사람들의 embark_town 분포별 생존여부
dt2 = dt.query('''pclass == 1 and age >=70 and sex == "male"''')
dt2.groupby('embark_town')['survived'].sum()
# survived 0/1 이므로 sum으로 생존여부 나타낼 수 있음

# 6. pclass ==3 이고 age<=30인 여성 사람들의 embark_town 분포별 생존여부
dt2 = dt.query('''pclass == 3 and age <=30 and sex == "female"''')
dt2.groupby('embark_town')['survived'].sum()

# 7. embark_town == 'Southampton' 이고 age<=10이고 fare<=50 사람들의 sex 분포별 생존여부
dt2 = dt.query('''embark_town == 'Southampton' and age <=10 and fare<=50''')
dt2.groupby('sex')['survived'].sum()

# 8. embark_town == 'Queenstown' 이고 age>=30이고 sex == 'female' 사람들의 pclass 분포별 생존여부
dt2 = dt.query('''embark_town == 'Queenstown' and age >=30 and sex == "female"''')
dt2.groupby('pclass')['survived'].sum()

# 9. embark_town == 'Cherbourg' 또는 age>=50이고 sex == 'male' 사람들의 pclass 분포별 fare 평균
dt2 = dt.query('''embark_town == 'Cherbourg' or age >=50 and sex == "male"''')
dt2.groupby('pclass')['fare'].mean()

# 10. survived == 0 (생존X) 이고 sex == 'male' 이고 age>=30 and <=40인 사람들의 pclass 별 alone 여부
dt['alone']
dt2 = dt.query("survived == 0 and sex == 'male' and (age>=30 and age<=40)")
dt2.groupby('pclass')['alone'].sum()
# boolean 1/0

# 주의 - mean() >> 괄호 붙여주어야 한다.
fema_fare10 = dt.query('''sex == "female" and (age >= 10 and age < 20)''')['fare'].mean()
fema_fare20 = dt.query('''sex == "female" and (age >= 20 and age < 30)''')['fare'].mean()
fema_fare30 = dt.query('''sex == "female" and (age >= 30 and age < 40)''')['fare'].mean()
fema_fare40s = dt.query('''sex == "female" and age >= 40''')['fare'].mean()

ma_fare0 = dt.query('''sex == "male" and age < 10''')['fare'].mean()
ma_fare10 = dt.query('''sex == "male" and (age >= 10 and age < 20)''')['fare'].mean()
ma_fare20 = dt.query('''sex == "male" and (age >= 20 and age < 30)''')['fare'].mean()
ma_fare30 = dt.query('''sex == "male" and (age >= 30 and age < 40)''')['fare'].mean()
ma_fare40s = dt.query('''sex == "male" and age >= 40''')['fare'].mean()

fema_fare0

fema_fare10 = dt.query('''sex == "female" and (age >= 10 and age < 20)''')['fare'].mean()
fema_fare10

dt.query('''sex == "female" and (10 <= age < 20)''')['fare'].mean()

dt['sex'] == 'female'
## True, False로 추출
dt['sex'].loc[0]
## 해당 행의 값을 추출

{(dt['sex'].loc[5] == 'female') & (dt['age'].loc[5] < 10)}

# 해당 행[i]에 값이 들어가도록 하려면
# dt['10대 미만(F)'] = fema_fare0 이 아니라
# dt['10대 미만(F)'].loc[i] = fema_fare0 처럼 행을 지정해주어야 한다.
# for i in range(len(dt)):
#     if {(dt['sex'].loc[i] == 'female') & (dt['age'].loc[i] < 10)}:
#         dt['10대 미만(F)'].loc[i] = fema_fare0
#     elif {(dt['sex'].loc[i] == 'female') & (dt['age'].loc[i] >= 10 & dt['age'].loc[i] < 20)}:
#         dt['10대(F)'].loc[i] = fema_fare10
#     elif {(dt['sex'].loc[i] == 'female') & (dt['age'].loc[i] >= 20 & dt['age'].loc[i] < 30)}:
#         dt['20대(F)'].loc[i] = fema_fare20
#     elif {(dt['sex'].loc[i] == 'female') & (dt['age'].loc[i] >= 30 & dt['age'].loc[i] < 40)}:
#         dt['30대(F)'].loc[i] = fema_fare30
#     elif {(dt['sex'].loc[i] == 'female') & (dt['age'].loc[i] >= 40)}:
#         dt['40대 이상(F)'].loc[i] = fema_fare40s

'''
주어진 코드에서 몇 가지 문제:

1. if 문의 조건 부분에 중괄호({})를 사용하고 있습니다.
중괄호는 집합(set)을 생성하는 것이 아니라, 그룹화를 위해 사용됩니다.
따라서 여기서는 중괄호 대신에 소괄호(())를 사용해야 합니다.

논리 연산자 &를 사용할 때, 각 조건문 내에서 괄호로 묶어야 합니다.
이것을 하지 않으면 우선순위가 잘못 설정될 수 있습니다.

마지막으로, 여러 if 문을 연속적으로 사용하는 것보다
if, elif, else를 사용하여 더 간단하고 효율적인 코드를 작성할 수 있습니다.
'''

for i in range(len(dt)):
    if (dt['sex'].loc[i] == 'female') and (dt['age'].loc[i] < 10):
        dt['10대 미만(F)'].loc[i] = fema_fare0
    elif (dt['sex'].loc[i] == 'female') and (10 <= dt['age'].loc[i] < 20):
        dt['10대(F)'].loc[i] = fema_fare10
    elif (dt['sex'].loc[i] == 'female') and (20 <= dt['age'].loc[i] < 30):
        dt['20대(F)'].loc[i] = fema_fare20
    elif (dt['sex'].loc[i] == 'female') and (30 <= dt['age'].loc[i] < 40):
        dt['30대(F)'].loc[i] = fema_fare30
    elif (dt['sex'].loc[i] == 'female') and (dt['age'].loc[i] >= 40):
        dt['40대 이상(F)'].loc[i] = fema_fare40s

# for i in range(len(dt)):
#     if {(dt['sex'].loc[i] == 'male') & (dt['age'].loc[i] < 10)}:
#         dt['10대 미만(M)'].loc[i] = ma_fare0
#     elif {(dt['sex'].loc[i] == 'male') & (dt['age'].loc[i] >= 10 & dt['age'].loc[i] < 20)}:
#         dt['10대(M)'].loc[i] = ma_fare10
#     elif {(dt['sex'].loc[i] == 'male') & (dt['age'].loc[i] >= 20 & dt['age'].loc[i] < 30)}:
#         dt['20대(M)'].loc[i] = ma_fare20
#     elif {(dt['sex'].loc[i] == 'male') & (dt['age'].loc[i] >= 30 & dt['age'].loc[i] < 40)}:
#         dt['30대(M)'].loc[i] = ma_fare30
#     elif {(dt['sex'].loc[i] == 'male') & (dt['age'].loc[i] >= 40)}:
#         dt['40대 이상(M)'].loc[i] = ma_fare40s

for i in range(len(dt)):
    if (dt['sex'].loc[i] == 'male') and (dt['age'].loc[i] < 10):
        dt['10대 미만(M)'].loc[i] = ma_fare0
    elif (dt['sex'].loc[i] == 'male') and (10 <= dt['age'].loc[i] < 20):
        dt['10대(M)'].loc[i] = ma_fare10
    elif (dt['sex'].loc[i] == 'male') and (20 <= dt['age'].loc[i] < 30):
        dt['20대(M)'].loc[i] = ma_fare20
    elif (dt['sex'].loc[i] == 'male') and (30 <= dt['age'].loc[i] < 40):
        dt['30대(M)'].loc[i] = ma_fare30
    elif (dt['sex'].loc[i] == 'male') and (dt['age'].loc[i] >= 40):
        dt['40대 이상(M)'].loc[i] = ma_fare40s

dt

